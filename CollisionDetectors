using System;
using System.Data;

namespace CollisionManager
{
    class CheckPositions
    {
        public static bool Check_position(int[][] level, (int, int)[] shape, int direction_x, int direction_y, int check_for)
        {
            foreach ((int, int) position in shape)
            {
                int posx = position.Item1;
                int posy = position.Item2;
                if (posy + (direction_y) < level[posx].Length && level[posx][posy + (direction_y)] == check_for)
                {
                    if (!shape.Contains((posx, posy + direction_y)))
                    {
                        return true;
                    }
                }
                if (posx + (direction_x) < level.Length && level[posx + (direction_x)][posy] == check_for)
                {
                    if (!shape.Contains((posx, posy + direction_x)))
                    { 
                        return true;
                    }
                }
            }
            return false;
        }
    }
    // To be changed.
    class BorderCollision
    {
        public static (int, int)[] Disappear_object(int[][] level, int posx, (int, int)[] shape)
        {
            (int, int)[] new_shape = new (int, int)[8];
            int counter = 0;
            int trim_by = 0;
            
            if (posx + 1 == level.Length)
            {
                foreach ((int, int)position in shape)
                {
                    if (position.Item1 != posx)
                    {
                        new_shape[counter] = ((position.Item1 + 1), position.Item2);
                        counter++;
                    }
                }
                foreach ((int, int)position in new_shape)
                {
                    if (position.Item1 == 0 && position.Item2 == 0)
                    {
                        trim_by++;
                    }
                }
                Array.Resize(ref new_shape, (new_shape.Length - trim_by));
                return new_shape;

            }
            return shape;
            
        }
    }

}
